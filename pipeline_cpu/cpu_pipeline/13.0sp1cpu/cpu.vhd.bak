LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_SIGNED.ALL;
LIBRARY altera_mf;
USE altera_mf.altera_mf_components.all;

ENTITY cpu IS 
	
	PORT (
		clock, reset : IN STD_LOGIC
	);

END cpu;	

Architecture cpu_arch OF cpu IS
	
	COMPONENT Ifetch IS
		PORT(
			Instruction : OUT STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			PC_plus_4_out : OUT STD_LOGIC_VECTOR( 9 DOWNTO 0 );
			Add_result : IN STD_LOGIC_VECTOR( 7 DOWNTO 0 );
			Branch : IN STD_LOGIC;
			Zero : IN STD_LOGIC;
			PC_out : OUT STD_LOGIC_VECTOR( 9 DOWNTO 0 );
			clock, reset : IN STD_LOGIC
		);
	END COMPONENT;
	
	COMPONENT Idecode IS
		PORT( 
			read_data_1 : OUT STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			read_data_2 : OUT STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			Instruction : IN STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			read_data : IN STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			ALU_result : IN STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			RegWrite : IN STD_LOGIC;
			MemtoReg : IN STD_LOGIC;
			RegDst : IN STD_LOGIC;
			Sign_extend : OUT STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			clock,reset : IN STD_LOGIC 
		);
	END COMPONENT;
	
	COMPONENT control IS
		PORT( 
			Opcode : IN STD_LOGIC_VECTOR( 5 DOWNTO 0 );
			RegDst : OUT STD_LOGIC;
			ALUSrc : OUT STD_LOGIC;
			MemtoReg : OUT STD_LOGIC;
			RegWrite : OUT STD_LOGIC;
			MemRead : OUT STD_LOGIC;
			MemWrite : OUT STD_LOGIC;
			Branch : OUT STD_LOGIC;
			ALUop : OUT STD_LOGIC_VECTOR( 1 DOWNTO 0 );
			clock, reset : IN STD_LOGIC 
		);
	END COMPONENT;
			
	COMPONENT Execute IS
		PORT( 
			Read_data_1 : IN STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			Read_data_2 : IN STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			Sign_extend : IN STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			Function_opcode : IN STD_LOGIC_VECTOR( 5 DOWNTO 0 );
			ALUOp : IN STD_LOGIC_VECTOR( 1 DOWNTO 0 );
			ALUSrc : IN STD_LOGIC;
			Zero : OUT STD_LOGIC;
			ALU_Result : OUT STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			Add_Result : OUT STD_LOGIC_VECTOR( 7 DOWNTO 0 );
			PC_plus_4 : IN STD_LOGIC_VECTOR( 9 DOWNTO 0 );
			clock, reset : IN STD_LOGIC 
		);
	END COMPONENT;	

	COMPONENT dmemory IS
		PORT( 
			read_data : OUT STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			address : IN STD_LOGIC_VECTOR( 7 DOWNTO 0 );
			write_data : IN STD_LOGIC_VECTOR( 31 DOWNTO 0 );
			MemRead, Memwrite : IN STD_LOGIC;
			clock,reset : IN STD_LOGIC 
		);
		
	END COMPONENT;
	
	SIGNAL Add_result: STD_LOGIC_VECTOR( 7 DOWNTO 0 );
	SIGNAL Branch: STD_LOGIC;
	SIGNAL Zero: STD_LOGIC;
	SIGNAL Instruction: STD_LOGIC_VECTOR( 31 DOWNTO 0 );
	SIGNAL PC_plus_4: STD_LOGIC_VECTOR( 9 DOWNTO 0 );
	SIGNAL PC: STD_LOGIC_VECTOR( 9 DOWNTO 0 );
	
	ALIAS Opcode: STD_LOGIC_VECTOR( 5 DOWNTO 0 ) IS Instruction(31 DOWNTO 26);
	SIGNAL RegDst, ALUSrc, MemtoReg, RegWrite, MemRead, MemWrite: STD_LOGIC;
	SIGNAL ALUop : STD_LOGIC_VECTOR( 1 DOWNTO 0 );
	
	SIGNAL read_data_1 : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
	SIGNAL read_data_2 : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
	SIGNAL read_data : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
	SIGNAL Sign_extend : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
	
	SIGNAL ALU_Result : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
	ALIAS address: STD_LOGIC_VECTOR(7 DOWNTO 0) IS ALU_Result(31 DOWNTO 24);  
		
BEGIN	
	
	STAGE0: Ifetch PORT MAP (Instruction, PC_plus_4, Add_result, Branch, Zero, PC, clock, reset);
	STAGE1: control PORT MAP (Opcode, RegDst, ALUSrc, MemtoReg, RegWrite, MemRead, MemWrite, Branch, ALUOp, clock, reset);	
	STAGE2: Idecode PORT MAP (read_data_1, read_data_2, Instruction, read_data, ALU_result, RegWrite, MemtoReg, RegDst, Sign_extend, clock, reset);
	STAGE3: Execute PORT MAP (read_data_1, read_data_2, Sign_extend, Opcode, ALUOp, ALUSrc, Zero, ALU_Result, Add_Result, PC_plus_4, clock, reset);
	STAGE4: dmemory PORT MAP (read_data, address, read_data_2, memRead, memWrite, clock, reset);

END cpu_arch;	
	



